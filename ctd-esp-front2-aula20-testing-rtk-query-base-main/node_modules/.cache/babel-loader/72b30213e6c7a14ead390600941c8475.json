{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\CTD-frontend\\\\ctd-esp-front2-aula20-testing-rtk-query-base-main\\\\src\\\\features\\\\language\\\\language.context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useMemo, useState } from 'react';\nimport translate from 'features/language/language.services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  language: 'ENGLISH'\n};\nconst LanguageContext = /*#__PURE__*/createContext(undefined);\nexport const LanguageProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [language, setLanguage] = useState(initialState.language);\n  const value = useMemo(() => ({\n    language,\n    setLanguage,\n    t: key => translate(language, key)\n  }), [language]);\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n\n_s(LanguageProvider, \"p3lrINoQy6idsaz3oki3qE5M5Fk=\");\n\n_c = LanguageProvider;\n\nconst useLanguage = () => {\n  _s2();\n\n  const context = useContext(LanguageContext);\n\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n\n  return context;\n};\n\n_s2(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport default useLanguage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["createContext","useContext","useMemo","useState","translate","initialState","language","LanguageContext","undefined","LanguageProvider","children","setLanguage","value","t","key","useLanguage","context","Error"],"sources":["C:/Git/CTD-frontend/ctd-esp-front2-aula20-testing-rtk-query-base-main/src/features/language/language.context.tsx"],"sourcesContent":["import { createContext, FC, useContext, useMemo, useState } from 'react';\nimport Languages from 'features/language/language.types';\nimport translate from 'features/language/language.services';\n\nexport interface LanguageState {\n  language: Languages;\n  setLanguage: (language: Languages) => void;\n  t: (key: string) => string;\n}\n\nconst initialState = {\n  language: 'ENGLISH' as Languages\n} as LanguageState;\n\nconst LanguageContext = createContext<LanguageState | undefined>(undefined);\n\nexport const LanguageProvider: FC = ({ children }) => {\n  const [language, setLanguage] = useState<Languages>(initialState.language);\n\n  const value = useMemo(\n    () => ({\n      language,\n      setLanguage,\n      t: (key: string) => translate(language, key)\n    }),\n    [language]\n  );\n\n  return <LanguageContext.Provider value={value}>{children}</LanguageContext.Provider>;\n};\n\nconst useLanguage = (): LanguageState => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n\nexport default useLanguage;\n"],"mappings":";;;;AAAA,SAASA,aAAT,EAA4BC,UAA5B,EAAwCC,OAAxC,EAAiDC,QAAjD,QAAiE,OAAjE;AAEA,OAAOC,SAAP,MAAsB,qCAAtB;;AAQA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE;AADS,CAArB;AAIA,MAAMC,eAAe,gBAAGP,aAAa,CAA4BQ,SAA5B,CAArC;AAEA,OAAO,MAAMC,gBAAoB,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EACpD,MAAM,CAACJ,QAAD,EAAWK,WAAX,IAA0BR,QAAQ,CAAYE,YAAY,CAACC,QAAzB,CAAxC;EAEA,MAAMM,KAAK,GAAGV,OAAO,CACnB,OAAO;IACLI,QADK;IAELK,WAFK;IAGLE,CAAC,EAAGC,GAAD,IAAiBV,SAAS,CAACE,QAAD,EAAWQ,GAAX;EAHxB,CAAP,CADmB,EAMnB,CAACR,QAAD,CANmB,CAArB;EASA,oBAAO,QAAC,eAAD,CAAiB,QAAjB;IAA0B,KAAK,EAAEM,KAAjC;IAAA,UAAyCF;EAAzC;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAbM;;GAAMD,gB;;KAAAA,gB;;AAeb,MAAMM,WAAW,GAAG,MAAqB;EAAA;;EACvC,MAAMC,OAAO,GAAGf,UAAU,CAACM,eAAD,CAA1B;;EACA,IAAI,CAACS,OAAL,EAAc;IACZ,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;EACD;;EACD,OAAOD,OAAP;AACD,CAND;;IAAMD,W;;AAQN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}