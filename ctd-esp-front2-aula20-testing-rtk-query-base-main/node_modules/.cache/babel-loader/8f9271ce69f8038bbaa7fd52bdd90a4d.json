{"ast":null,"code":"import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { locationReducer, locationsApi } from 'features/locations';\nimport { charactersApi } from 'features/characters';\nimport { followingReducer } from 'features/following';\nconst rootReducer = combineReducers({\n  [charactersApi.reducerPath]: charactersApi.reducer,\n  [locationsApi.reducerPath]: locationsApi.reducer,\n  //\n  locations: locationReducer,\n  following: followingReducer\n});\nexport const store = configureStore({\n  reducer: rootReducer,\n  // Adding the api middleware enables caching, invalidation, polling,\n  // and other useful features of `rtk-query`.\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(locationsApi.middleware).concat(charactersApi.middleware)\n}); // Inferir os tipos de `RootState` e `AppDispatch` da store","map":{"version":3,"names":["combineReducers","configureStore","locationReducer","locationsApi","charactersApi","followingReducer","rootReducer","reducerPath","reducer","locations","following","store","middleware","getDefaultMiddleware","concat"],"sources":["C:/Git/CTD-frontend/ctd-esp-front2-aula20-testing-rtk-query-base-main/src/store/store.ts"],"sourcesContent":["import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { locationReducer, locationsApi } from 'features/locations';\nimport { charactersApi } from 'features/characters';\nimport { followingReducer } from 'features/following';\n\nconst rootReducer = combineReducers({\n  [charactersApi.reducerPath]: charactersApi.reducer,\n  [locationsApi.reducerPath]: locationsApi.reducer,\n  //\n  locations: locationReducer,\n  following: followingReducer\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  // Adding the api middleware enables caching, invalidation, polling,\n  // and other useful features of `rtk-query`.\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(locationsApi.middleware).concat(charactersApi.middleware)\n});\n\n// Inferir os tipos de `RootState` e `AppDispatch` da store\nexport type RootState = ReturnType<typeof store.getState>;\n// Tipo inferido: {pokemon: PokemonState}\nexport type AppDispatch = typeof store.dispatch;\n"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,cAA1B,QAAgD,kBAAhD;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,oBAA9C;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,MAAMC,WAAW,GAAGN,eAAe,CAAC;EAClC,CAACI,aAAa,CAACG,WAAf,GAA6BH,aAAa,CAACI,OADT;EAElC,CAACL,YAAY,CAACI,WAAd,GAA4BJ,YAAY,CAACK,OAFP;EAGlC;EACAC,SAAS,EAAEP,eAJuB;EAKlCQ,SAAS,EAAEL;AALuB,CAAD,CAAnC;AAQA,OAAO,MAAMM,KAAK,GAAGV,cAAc,CAAC;EAClCO,OAAO,EAAEF,WADyB;EAElC;EACA;EACAM,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,GAAGC,MAAvB,CAA8BX,YAAY,CAACS,UAA3C,EAAuDE,MAAvD,CAA8DV,aAAa,CAACQ,UAA5E;AALgC,CAAD,CAA5B,C,CAQP"},"metadata":{},"sourceType":"module"}